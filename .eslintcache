[{"D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\src\\index.js":"1","D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\src\\App.js":"2","D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\src\\reportWebVitals.js":"3","D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\src\\components\\payroll-form\\payroll-form.jsx":"4","D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\src\\services\\employee-payroll-service.js":"5","D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\src\\config\\config.js":"6","D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\src\\services\\axios-service.js":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":415,"mtime":1608092027982,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":15136,"mtime":1608127214632,"results":"12","hashOfConfig":"9"},{"size":270,"mtime":1608127969583,"results":"13","hashOfConfig":"9"},{"size":60,"mtime":1608119577326,"results":"14","hashOfConfig":"9"},{"size":728,"mtime":1608127903357,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1jkk3tc",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\src\\index.js",[],["34","35"],"D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\src\\App.js",["36"],"import './App.css';\nimport PayrollForm from './components/payroll-form/payroll-form';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route, Redirect\n}from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path = \"\">\n            <PayrollForm/>\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;","D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\src\\reportWebVitals.js",[],"D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\src\\components\\payroll-form\\payroll-form.jsx",["37","38"],"import React, { useState, useEffect } from 'react';\r\nimport profile1 from '../../assets/profile-images/Ellipse -1.png';\r\nimport profile2 from '../../assets/profile-images/Ellipse -3.png';\r\nimport profile3 from '../../assets/profile-images/Ellipse -7.png';\r\nimport profile4 from '../../assets/profile-images/Ellipse -8.png';\r\nimport './payroll-form.scss';\r\nimport EmployeeService from \"../../services/employee-payroll-service\";\r\nimport logo from 'D:/ReactJS/demoReact/EmployeePayrollApp/employeepayrollapp/src/assets/images/logo.png'\r\nimport { useParams, Link, withRouter } from 'react-router-dom';\r\n\r\nconst PayrollForm = (props) => {\r\n    let initialValue = {\r\n        name: '',\r\n        profileArray: [\r\n            { url: '../../assets/profile-images/Ellipse -1.png' },\r\n            { url: '../../assets/profile-images/Ellipse -3.png' },\r\n            { url: '../../assets/profile-images/Ellipse -7.png' },\r\n            { url: '../../assets/profile-images/Ellipse -8.png' }\r\n\r\n        ],\r\n        allDepartment: [\r\n            'HR', 'Sales', 'Finance', 'Engineer', 'Others'\r\n        ],\r\n        departMentValue: [],\r\n        gender: '',\r\n        salary: '',\r\n        day: '1',\r\n        month: 'Jan',\r\n        year: '2020',\r\n        startDate: '',\r\n        notes: '',\r\n        id: '',\r\n        profileUrl: '',\r\n        isUpdate: false,\r\n        error: {\r\n            department: '',\r\n            name: '',\r\n            gender: '',\r\n            salary: '',\r\n            profileUrl: '',\r\n            startDate: ''\r\n        }\r\n    }\r\n    const [formValue, setForm] = useState(initialValue);\r\n  \r\n    const employeeService = new EmployeeService();\r\n\r\n    let _ = require('lodash');\r\n    formValue.id = _.uniqueId();\r\n    \r\n    const changeValue = (event) => {\r\n        setForm({ ...formValue, [event.target.name]: event.target.value })\r\n        console.log(event.target.value)\r\n    }\r\n\r\n    const onCheckChange = (name) => {\r\n        let index = formValue.departMentValue.indexOf(name);\r\n       \r\n        let checkArray = [...formValue.departMentValue]\r\n        if (index > -1)\r\n            checkArray.splice(index, 1)\r\n        else\r\n            checkArray.push(name);\r\n        setForm({ ...formValue, departMentValue: checkArray });\r\n    }\r\n    const getChecked = (name) => {\r\n        return formValue.departMentValue && formValue.departMentValue.includes(name);\r\n    }\r\n\r\n    const handleValidations = async () => {\r\n        let isError = false;\r\n        let error = {\r\n            department: '',\r\n            name: '',\r\n            gender: '',\r\n            salary: '',\r\n            profileUrl: '',\r\n            startDate: ''\r\n        }\r\n        if (!formValue.name.match('^[A-Z]{1}[a-zA-Z]{2,}')) {\r\n            error.name = 'Name is Invalid!!'\r\n            isError = true;\r\n        }\r\n        if (formValue.gender.length < 1) {\r\n            error.gender = 'Gender is a required field'\r\n            isError = true;\r\n        }\r\n        \r\n        if ((formValue.salary.valueOf()<400000)||(formValue.salary.valueOf()>500000)) {\r\n            error.salary = 'Salary should be between 4,00,000 and 5,00,000!!'\r\n            isError = true;\r\n        }\r\n        if (formValue.profileUrl.length < 1) {\r\n            error.profileUrl = 'Profile is a required field'\r\n            isError = true;\r\n        }\r\n\r\n        if (formValue.departMentValue.length < 1) {\r\n            error.department = 'Department is a required field'\r\n            isError = true;\r\n        }\r\n        var day = formValue.day.valueOf();\r\n        var month = formValue.month.valueOf();\r\n        var year = formValue.year.valueOf();\r\n        var date = new Date(day+\" \"+month+\" \"+year);\r\n        var nowDate = Date.now();\r\n        if(date>nowDate){\r\n            error.startDate = \"StartDate is a future Date!!\"\r\n            isError = true;\r\n        }\r\n        if(formValue.notes.length < 1){\r\n            error.notes = \"Notes is a required field\"\r\n            isError = true;\r\n        }\r\n        await setForm({ ...formValue, error: error })\r\n        return isError;\r\n\r\n    }\r\n    const save = async (event) => {\r\n        event.preventDefault();\r\n     \r\n        if(await handleValidations()){\r\n            console.log(\"error\", formValue);\r\n            return;\r\n        }else{\r\n        let object = {\r\n            name: formValue.name,\r\n            departMent: formValue.departMentValue,\r\n            gender: formValue.gender,\r\n            salary: formValue.salary,\r\n            startDate: `${formValue.day} ${formValue.month} ${formValue.year}`,\r\n            notes: formValue.notes,\r\n            id: formValue.id,\r\n            profileUrl: formValue.profileUrl,\r\n          };\r\n          console.log(\"id\"+formValue.id);\r\n          employeeService.addEmployee(object)\r\n            .then((data) => {\r\n              alert(\"data added successfully\");\r\n              props.history.push(\"\");\r\n              window.location.reload();\r\n            })\r\n            .catch((err) => {\r\n              alert(\"error while Adding data\");\r\n            });\r\n        }\r\n          };\r\n  \r\n  \r\n    const reset = () => {\r\n        setForm({ ...initialValue, id: formValue.id, isUpdate: formValue.isUpdate });\r\n\r\n        console.log(formValue);\r\n    }\r\n    return (\r\n        <div className=\"payroll-main\">\r\n            <header className='header row center'>\r\n                <div className=\"logo\">\r\n                    <img src={logo} alt=\"\" />\r\n                    <div>\r\n                        <span className=\"emp-text\">EMPLOYEE</span> <br />\r\n                        <span className=\"emp-text emp-payroll\">PAYROLL</span>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n            <div className=\"content\">\r\n                <form className=\"form\" action=\"#\" onSubmit={save}>\r\n                    <div className=\"form-head\">Employee Payroll form</div>\r\n                    <div className=\"row\">\r\n                        <label className=\"label text\" htmlFor=\"name\">Name</label>\r\n                        <input className=\"input\" type=\"text\" id=\"name\" name=\"name\" value={formValue.name} onChange={changeValue} placeholder=\"Your name..\" />\r\n                    <error className=\"error\">{formValue.error.name}</error>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <label className=\"label text\" htmlFor=\"profileUrl\">Profile image</label>\r\n                        <div className=\"profile-radio-button\">\r\n                            <label >\r\n                                <input type=\"radio\" name=\"profileUrl\" checked={formValue.profileUrl === '../../assets/profile-images/Ellipse -1.png'} value=\"../../assets/profile-images/Ellipse -1.png\" onChange={changeValue} />\r\n                                <img className=\"profile\" src={profile1} alt=\"profile\" />\r\n                            </label>\r\n                            <label >\r\n                                <input type=\"radio\" name=\"profileUrl\" checked={formValue.profileUrl === '../../assets/profile-images/Ellipse -3.png'} value=\"../../assets/profile-images/Ellipse -3.png\" onChange={changeValue} />\r\n                                <img className=\"profile\" src={profile2} alt=\"profile\" />\r\n                            </label>\r\n                            <label >\r\n                                <input type=\"radio\" name=\"profileUrl\" checked={formValue.profileUrl === '../../assets/profile-images/Ellipse -7.png'} value=\"../../assets/profile-images/Ellipse -7.png\" onChange={changeValue} />\r\n                                <img className=\"profile\" src={profile3} alt=\"profile\" />\r\n                            </label>\r\n                            <label >\r\n                                <input type=\"radio\" name=\"profileUrl\" checked={formValue.profileUrl === '../../assets/profile-images/Ellipse -8.png'} value=\"../../assets/profile-images/Ellipse -8.png\" onChange={changeValue} />\r\n                                <img className=\"profile\" src={profile4} alt=\"profile\" />\r\n                            </label>\r\n\r\n                        </div>\r\n                        <error className=\"error\">{formValue.error.profileUrl}</error>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <label className=\"label text\" htmlFor=\"gender\">Gender</label>\r\n                        <div>\r\n                            <input type=\"radio\" id=\"male\" checked={formValue.gender === 'male'} onChange={changeValue} name=\"gender\" value=\"male\" />\r\n                            <label className=\"text\" htmlFor=\"male\">Male</label>\r\n                            <input type=\"radio\" id=\"female\" checked={formValue.gender === 'female'} onChange={changeValue} name=\"gender\" value=\"female\" />\r\n                            <label className=\"text\" htmlFor=\"female\">Female</label>\r\n                        </div>\r\n                        <error className=\"error\">{formValue.error.gender}</error>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <label className=\"label text\" htmlFor=\"department\">Department</label>\r\n                        <div>\r\n                            {formValue.allDepartment.map(item => (\r\n                                <span key={item}>\r\n                                    <input className=\"checkbox\" type=\"checkbox\" onChange={() => onCheckChange(item)} name={item}\r\n                                        checked={getChecked(item)} value={item} />\r\n                                    <label className=\"text\" htmlFor={item}>{item}</label>\r\n                                </span>\r\n                            ))}\r\n\r\n                        </div>\r\n                        <error className=\"error\">{formValue.error.department}</error>\r\n                    </div>\r\n                    \r\n                    <div className=\"row\">\r\n                        <label className=\"label text\" htmlFor=\"salary\">Salary</label>\r\n                        <input className=\"input\" type=\"text\" id=\"salary\" name=\"salary\" value={formValue.salary} onChange={changeValue} />\r\n                        <error className=\"error\">{formValue.error.salary}</error>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                        <label className=\"label text\" htmlFor=\"startDate\">Start Date</label>\r\n                        <div>\r\n                            <select value={formValue.day} onChange={changeValue} id=\"day\" name=\"day\">\r\n                                <option value=\"1\">1</option>\r\n                                <option value=\"2\">2</option>\r\n                                <option value=\"3\">3</option>\r\n                                <option value=\"4\">4</option>\r\n                                <option value=\"5\">5</option>\r\n                                <option value=\"6\">6</option>\r\n                                <option value=\"7\">7</option>\r\n                                <option value=\"8\">8</option>\r\n                                <option value=\"9\">9</option>\r\n                                <option value=\"10\">10</option>\r\n                                <option value=\"11\">11</option>\r\n                                <option value=\"12\">12</option>\r\n                                <option value=\"13\">13</option>\r\n                                <option value=\"14\">14</option>\r\n                                <option value=\"15\">15</option>\r\n                                <option value=\"16\">16</option>\r\n                                <option value=\"17\">17</option>\r\n                                <option value=\"18\">18</option>\r\n                                <option value=\"19\">19</option>\r\n                                <option value=\"20\">20</option>\r\n                                <option value=\"21\">21</option>\r\n                                <option value=\"22\">22</option>\r\n                                <option value=\"23\">23</option>\r\n                                <option value=\"24\">24</option>\r\n                                <option value=\"25\">25</option>\r\n                                <option value=\"26\">26</option>\r\n                                <option value=\"27\">27</option>\r\n                                <option value=\"28\">28</option>\r\n                                <option value=\"29\">29</option>\r\n                                <option value=\"30\">30</option>\r\n                                <option value=\"31\">31</option>\r\n                            </select>\r\n                            <select value={formValue.month} onChange={changeValue} id=\"month\" name=\"month\">\r\n                                <option value=\"Jan\">January</option>\r\n                                <option value=\"Feb\">Febuary</option>\r\n                                <option value=\"March\">March</option>\r\n                                <option value=\"April\">April</option>\r\n                                <option value=\"May\">May</option>\r\n                                <option value=\"June\">June</option>\r\n                                <option value=\"July\">July</option>\r\n                                <option value=\"Aug\">August</option>\r\n                                <option value=\"Sept\">September</option>\r\n                                <option value=\"Oct\">October</option>\r\n                                <option value=\"Nov\">November</option>\r\n                                <option value=\"Dec\">December</option>\r\n                            </select>\r\n                            <select value={formValue.year} onChange={changeValue} id=\"year\" name=\"year\">\r\n                                <option value=\"2020\">2020</option>\r\n                                <option value=\"2019\">2019</option>\r\n                                <option value=\"2018\">2018</option>\r\n                                <option value=\"2017\">2017</option>\r\n                                <option value=\"2016\">2016</option>\r\n                            </select>\r\n                        </div>\r\n                        <error className=\"error\">{formValue.error.startDate}</error>\r\n                    </div>\r\n                    \r\n                    <div className=\"row\">\r\n                        <label className=\"label text\" htmlFor=\"notes\">Notes</label>\r\n                        <textarea onChange={changeValue} id=\"notes\" value={formValue.notes} className=\"input\" name=\"notes\" placeholder=\"\"\r\n                            style={{ height: '120%' }}></textarea>\r\n                    <error className=\"error\">{formValue.error.notes}</error>\r\n                    </div>\r\n\r\n                    <div className=\"buttonParent\">\r\n                        <Link to=\"\" className=\"resetButton button cancelButton\">Cancel</Link>\r\n\r\n                        <div className=\"submit-reset\">\r\n                            <button type=\"submit\" className=\"button submitButton\" id=\"submitButton\">{formValue.isUpdate ? 'Update' : 'Submit'}</button>\r\n                            <button type=\"button\" onClick={reset} className=\"resetButton button\">Reset</button>\r\n                        </div>\r\n                    </div >\r\n                </form >\r\n            </div >\r\n        </div >\r\n    )\r\n}\r\nexport default withRouter(PayrollForm);","D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\src\\services\\employee-payroll-service.js",[],"D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\src\\config\\config.js",[],["39","40"],"D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\src\\services\\axios-service.js",[],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":6,"column":10,"nodeType":"47","messageId":"48","endLine":6,"endColumn":18},{"ruleId":"45","severity":1,"message":"49","line":1,"column":27,"nodeType":"47","messageId":"48","endLine":1,"endColumn":36},{"ruleId":"45","severity":1,"message":"50","line":9,"column":10,"nodeType":"47","messageId":"48","endLine":9,"endColumn":19},{"ruleId":"41","replacedBy":"51"},{"ruleId":"43","replacedBy":"52"},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useParams' is defined but never used.",["53"],["54"],"no-global-assign","no-unsafe-negation"]