[{"D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\employeepayrollapp\\src\\index.js":"1","D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\employeepayrollapp\\src\\reportWebVitals.js":"2","D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\employeepayrollapp\\src\\App.js":"3","D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\employeepayrollapp\\src\\components\\employee-home\\employee-home.jsx":"4","D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\employeepayrollapp\\src\\components\\payroll-form\\payroll-form.jsx":"5","D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\employeepayrollapp\\src\\services\\employee-payroll-service.js":"6","D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\employeepayrollapp\\src\\components\\display\\display.jsx":"7","D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\employeepayrollapp\\src\\services\\axios-service.js":"8","D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\employeepayrollapp\\src\\config\\config.js":"9"},{"size":500,"mtime":1608300367944,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":787,"mtime":1608300241711,"results":"13","hashOfConfig":"11"},{"size":3123,"mtime":1608287429456,"results":"14","hashOfConfig":"11"},{"size":16728,"mtime":1608298812592,"results":"15","hashOfConfig":"11"},{"size":685,"mtime":1608296248992,"results":"16","hashOfConfig":"11"},{"size":3219,"mtime":1608302066809,"results":"17","hashOfConfig":"11"},{"size":813,"mtime":1608301581758,"results":"18","hashOfConfig":"11"},{"size":85,"mtime":1608301596323,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1kvvq80",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\employeepayrollapp\\src\\index.js",[],"D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\employeepayrollapp\\src\\reportWebVitals.js",[],["40","41"],"D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\employeepayrollapp\\src\\App.js",[],"D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\employeepayrollapp\\src\\components\\employee-home\\employee-home.jsx",[],"D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\employeepayrollapp\\src\\components\\payroll-form\\payroll-form.jsx",["42","43"],"import React, { useState, useEffect } from 'react';\r\nimport profile1 from '../../assets/profile-images/Ellipse -1.png';\r\nimport profile2 from '../../assets/profile-images/Ellipse -3.png';\r\nimport profile3 from '../../assets/profile-images/Ellipse -7.png';\r\nimport profile4 from '../../assets/profile-images/Ellipse -8.png';\r\nimport './payroll-form.scss';\r\nimport EmployeeService from \"../../services/employee-payroll-service\";\r\nimport logo from 'D:/ReactJS/demoReact/EmployeePayrollApp/employeepayrollapp/employeepayrollapp/src/assets/images/logo.png'\r\nimport { useParams, Link, withRouter ,Redirect} from 'react-router-dom';\r\n\r\nconst PayrollForm = (props) => {\r\n    let initialValue = {\r\n        name: '',\r\n        profileArray: [\r\n            { url: '../../assets/profile-images/Ellipse -1.png' },\r\n            { url: '../../assets/profile-images/Ellipse -3.png' },\r\n            { url: '../../assets/profile-images/Ellipse -7.png' },\r\n            { url: '../../assets/profile-images/Ellipse -8.png' }\r\n\r\n        ],\r\n        allDepartment: [\r\n            'HR', 'Sales', 'Finance', 'Engineer', 'Others'\r\n        ],\r\n        departmentValue: [],\r\n        gender: '',\r\n        salary: '',\r\n        day: '1',\r\n        month: 'Jan',\r\n        year: '2020',\r\n        startDate: '',\r\n        notes: '',\r\n        id: '',\r\n        profilePic: '',\r\n        isUpdate: false,\r\n        error: {\r\n            department: '',\r\n            name: '',\r\n            gender: '',\r\n            salary: '',\r\n            profilePic: '',\r\n            startDate: ''\r\n        }\r\n    }\r\n    const [formValue, setForm] = useState(initialValue);\r\n    const employeeService = new EmployeeService();\r\n    const params = useParams();\r\n\r\n    useEffect(() => {\r\n        if (params.id) {\r\n          getDataById(params.id);\r\n        }\r\n      }, []);\r\n\r\n      const getDataById = (id) => {\r\n        employeeService\r\n          .getEmployee(id)\r\n          .then((data) => {\r\n            console.log(\"data is \", data.data.data);\r\n            let obj = data.data.data;\r\n            setData(obj);\r\n          })\r\n          .catch((err) => {\r\n            console.log(\"err is \", err);\r\n          });\r\n      };\r\n    \r\n    const setData = (obj) => {\r\n        console.log(\"StartDate \"+obj.startDate);\r\n        let array = obj.startDate.split(\"-\");\r\n        setForm({\r\n          ...formValue,\r\n          ...obj,\r\n          departmentValue: obj.departments,\r\n          isUpdate: true,\r\n          day: array[0],\r\n          month: array[1],\r\n          year: array[2],\r\n        });\r\n      };\r\n\r\n    const changeValue = (event) => {\r\n        setForm({ ...formValue, [event.target.name]: event.target.value })\r\n        console.log(event.target.value)\r\n    }\r\n\r\n    const onCheckChange = (name) => {\r\n        let index = formValue.departmentValue.indexOf(name);\r\n       \r\n        let checkArray = [...formValue.departmentValue]\r\n        if (index > -1)\r\n            checkArray.splice(index, 1)\r\n        else\r\n            checkArray.push(name);\r\n        setForm({ ...formValue, departmentValue: checkArray });\r\n    }\r\n    const getChecked = (name) => {\r\n        return formValue.departmentValue && formValue.departmentValue.includes(name);\r\n    }\r\n\r\n    const handleValidations = async () => {\r\n        let isError = false;\r\n        let error = {\r\n            department: '',\r\n            name: '',\r\n            gender: '',\r\n            salary: '',\r\n            profilePic: '',\r\n            startDate: ''\r\n        }\r\n        if (!formValue.name.match('^[A-Z]{1}[a-zA-Z]{2,}')) {\r\n            error.name = 'Name is Invalid!!'\r\n            isError = true;\r\n        }\r\n        if (formValue.gender.length < 1) {\r\n            error.gender = 'Gender is a required field'\r\n            isError = true;\r\n        }\r\n        \r\n        if ((formValue.salary.valueOf()<400000)||(formValue.salary.valueOf()>500000)) {\r\n            error.salary = 'Salary should be between 4,00,000 and 5,00,000!!'\r\n            isError = true;\r\n        }\r\n        if (formValue.profilePic.length < 1) {\r\n            error.profilePic = 'Profile is a required field'\r\n            isError = true;\r\n        }\r\n\r\n        if (formValue.departmentValue.length < 1) {\r\n            error.department = 'Department is a required field'\r\n            isError = true;\r\n        }\r\n        var day = formValue.day.valueOf();\r\n        var month = formValue.month.valueOf();\r\n        var year = formValue.year.valueOf();\r\n        var date = new Date(day+\"-\"+month+\"-\"+year);\r\n        var nowDate = Date.now();\r\n        if(date>nowDate){\r\n            error.startDate = \"StartDate is a future Date!!\"\r\n            isError = true;\r\n        }\r\n        if(formValue.notes.length < 1){\r\n            error.notes = \"Notes is a required field\"\r\n            isError = true;\r\n        }\r\n        await setForm({ ...formValue, error: error })\r\n        return isError;\r\n\r\n    }\r\n    const save = async (event) => {\r\n        event.preventDefault();\r\n     \r\n        if(await handleValidations()){\r\n            console.log(\"error\", formValue);\r\n            return;\r\n        }else{\r\n        let object = {\r\n            name: formValue.name,\r\n            department: formValue.departmentValue,\r\n            gender: formValue.gender,\r\n            salary: formValue.salary,\r\n            startDate: `${formValue.day}-${formValue.month}-${formValue.year}`,\r\n            notes: formValue.notes,\r\n            id: formValue.id,\r\n            profilePic: formValue.profilePic,\r\n          };\r\n          if (formValue.isUpdate) {\r\n              console.log(\"Object inside update in payroll:\"+object.data);\r\n            employeeService\r\n              .updateEmployee(object)\r\n              .then((data) => {\r\n                  window.confirm(\"Data once modified cannot be restored!! Do you wish to continue?\");\r\n                  alert(\"Data updated successfully!\");\r\n                console.log(\"data after update\", data);\r\n                props.history.push(\"\");\r\n              })\r\n              .catch((error) => {\r\n                alert(\"WARNING!! Error updating the data!\");\r\n                console.log(\"Error after update\"+error);\r\n              });\r\n          } else {\r\n            employeeService\r\n              .addEmployee(object)\r\n              .then((data) => {\r\n                  alert(\"Data Added successfully!!\")\r\n                console.log(\"Employee payroll added\");\r\n                props.history.push(\"\");\r\n              })\r\n              .catch((err) => {\r\n                  alert(\"WARNING!! Error while adding the data!\");\r\n                console.log(\"error occured while adding employee\");\r\n              });\r\n          }\r\n        }\r\n          };\r\n  \r\n  \r\n    const reset = () => {\r\n        setForm({ ...initialValue, id: formValue.id, isUpdate: formValue.isUpdate });\r\n\r\n        console.log(formValue);\r\n    }\r\n    return (\r\n        <div className=\"payroll-main\">\r\n            <header className='header row center'>\r\n                <div className=\"logo\">\r\n                    <img src={logo} alt=\"\" />\r\n                    <div>\r\n                        <span className=\"emp-text\">EMPLOYEE</span> <br />\r\n                        <span className=\"emp-text emp-payroll\">PAYROLL</span>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n            <div className=\"content\">\r\n                <form className=\"form\" action=\"#\" onSubmit={save}>\r\n                    <div className=\"form-head\">Employee Payroll form</div>\r\n                    <div className=\"row\">\r\n                        <label className=\"label text\" htmlFor=\"name\">Name</label>\r\n                        <input className=\"input\" type=\"text\" id=\"name\" name=\"name\" value={formValue.name} onChange={changeValue} placeholder=\"Your name..\" />\r\n                    <error className=\"error\">{formValue.error.name}</error>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <label className=\"label text\" htmlFor=\"profilePic\">Profile image</label>\r\n                        <div className=\"profile-radio-button\">\r\n                            <label >\r\n                                <input type=\"radio\" name=\"profilePic\" checked={formValue.profilePic === '../../assets/profile-images/Ellipse -1.png'} value=\"../../assets/profile-images/Ellipse -1.png\" onChange={changeValue} />\r\n                                <img className=\"profile\" src={profile1} alt=\"profile\" />\r\n                            </label>\r\n                            <label >\r\n                                <input type=\"radio\" name=\"profilePic\" checked={formValue.profilePic === '../../assets/profile-images/Ellipse -3.png'} value=\"../../assets/profile-images/Ellipse -3.png\" onChange={changeValue} />\r\n                                <img className=\"profile\" src={profile2} alt=\"profile\" />\r\n                            </label>\r\n                            <label >\r\n                                <input type=\"radio\" name=\"profilePic\" checked={formValue.profilePic === '../../assets/profile-images/Ellipse -7.png'} value=\"../../assets/profile-images/Ellipse -7.png\" onChange={changeValue} />\r\n                                <img className=\"profile\" src={profile3} alt=\"profile\" />\r\n                            </label>\r\n                            <label >\r\n                                <input type=\"radio\" name=\"profilePic\" checked={formValue.profilePic === '../../assets/profile-images/Ellipse -8.png'} value=\"../../assets/profile-images/Ellipse -8.png\" onChange={changeValue} />\r\n                                <img className=\"profile\" src={profile4} alt=\"profile\" />\r\n                            </label>\r\n\r\n                        </div>\r\n                        <error className=\"error\">{formValue.error.profilePic}</error>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <label className=\"label text\" htmlFor=\"gender\">Gender</label>\r\n                        <div>\r\n                            <input type=\"radio\" id=\"male\" checked={formValue.gender === 'male'} onChange={changeValue} name=\"gender\" value=\"male\" />\r\n                            <label className=\"text\" htmlFor=\"male\">Male</label>\r\n                            <input type=\"radio\" id=\"female\" checked={formValue.gender === 'female'} onChange={changeValue} name=\"gender\" value=\"female\" />\r\n                            <label className=\"text\" htmlFor=\"female\">Female</label>\r\n                        </div>\r\n                        <error className=\"error\">{formValue.error.gender}</error>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <label className=\"label text\" htmlFor=\"department\">Department</label>\r\n                        <div>\r\n                            {formValue.allDepartment.map(item => (\r\n                                <span key={item}>\r\n                                    <input className=\"checkbox\" type=\"checkbox\" onChange={() => onCheckChange(item)} name={item}\r\n                                        checked={getChecked(item)} value={item} />\r\n                                    <label className=\"text\" htmlFor={item}>{item}</label>\r\n                                </span>\r\n                            ))}\r\n\r\n                        </div>\r\n                        <error className=\"error\">{formValue.error.department}</error>\r\n                    </div>\r\n                    \r\n                    <div className=\"row\">\r\n                        <label className=\"label text\" htmlFor=\"salary\">Salary</label>\r\n                        <input className=\"input\" type=\"text\" id=\"salary\" name=\"salary\" value={formValue.salary} onChange={changeValue} />\r\n                        <error className=\"error\">{formValue.error.salary}</error>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                        <label className=\"label text\" htmlFor=\"startDate\">Start Date</label>\r\n                        <div>\r\n                            <select value={formValue.day} onChange={changeValue} id=\"day\" name=\"day\">\r\n                                <option value=\"1\">1</option>\r\n                                <option value=\"2\">2</option>\r\n                                <option value=\"3\">3</option>\r\n                                <option value=\"4\">4</option>\r\n                                <option value=\"5\">5</option>\r\n                                <option value=\"6\">6</option>\r\n                                <option value=\"7\">7</option>\r\n                                <option value=\"8\">8</option>\r\n                                <option value=\"9\">9</option>\r\n                                <option value=\"10\">10</option>\r\n                                <option value=\"11\">11</option>\r\n                                <option value=\"12\">12</option>\r\n                                <option value=\"13\">13</option>\r\n                                <option value=\"14\">14</option>\r\n                                <option value=\"15\">15</option>\r\n                                <option value=\"16\">16</option>\r\n                                <option value=\"17\">17</option>\r\n                                <option value=\"18\">18</option>\r\n                                <option value=\"19\">19</option>\r\n                                <option value=\"20\">20</option>\r\n                                <option value=\"21\">21</option>\r\n                                <option value=\"22\">22</option>\r\n                                <option value=\"23\">23</option>\r\n                                <option value=\"24\">24</option>\r\n                                <option value=\"25\">25</option>\r\n                                <option value=\"26\">26</option>\r\n                                <option value=\"27\">27</option>\r\n                                <option value=\"28\">28</option>\r\n                                <option value=\"29\">29</option>\r\n                                <option value=\"30\">30</option>\r\n                                <option value=\"31\">31</option>\r\n                            </select>\r\n                            <select value={formValue.month} onChange={changeValue} id=\"month\" name=\"month\">\r\n                                <option value=\"01\">January</option>\r\n                                <option value=\"02\">Febuary</option>\r\n                                <option value=\"03\">March</option>\r\n                                <option value=\"04\">April</option>\r\n                                <option value=\"05\">May</option>\r\n                                <option value=\"06\">June</option>\r\n                                <option value=\"07\">July</option>\r\n                                <option value=\"08\">August</option>\r\n                                <option value=\"09\">September</option>\r\n                                <option value=\"10\">October</option>\r\n                                <option value=\"11\">November</option>\r\n                                <option value=\"12\">December</option>\r\n                            </select>\r\n                            <select value={formValue.year} onChange={changeValue} id=\"year\" name=\"year\">\r\n                                <option value=\"2020\">2020</option>\r\n                                <option value=\"2019\">2019</option>\r\n                                <option value=\"2018\">2018</option>\r\n                                <option value=\"2017\">2017</option>\r\n                                <option value=\"2016\">2016</option>\r\n                            </select>\r\n                        </div>\r\n                        <error className=\"error\">{formValue.error.startDate}</error>\r\n                    </div>\r\n                    \r\n                    <div className=\"row\">\r\n                        <label className=\"label text\" htmlFor=\"notes\">Notes</label>\r\n                        <textarea onChange={changeValue} id=\"notes\" value={formValue.notes} className=\"input\" name=\"notes\" placeholder=\"\"\r\n                            style={{ height: '120%' }}></textarea>\r\n                    <error className=\"error\">{formValue.error.notes}</error>\r\n                    </div>\r\n\r\n                    <div className=\"buttonParent\">\r\n                        <Link to=\"\" className=\"resetButton button cancelButton\">Cancel</Link>\r\n\r\n                        <div className=\"submit-reset\">\r\n                            <button type=\"submit\" className=\"button submitButton\" id=\"submitButton\">{formValue.isUpdate ? 'Update' : 'Submit'}</button>\r\n                            <button type=\"button\" onClick={reset} className=\"resetButton button\">Reset</button>\r\n                        </div>\r\n                    </div >\r\n                </form >\r\n            </div >\r\n        </div >\r\n    )\r\n}\r\nexport default withRouter(PayrollForm);","D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\employeepayrollapp\\src\\services\\employee-payroll-service.js",[],"D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\employeepayrollapp\\src\\components\\display\\display.jsx",[],"D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\employeepayrollapp\\src\\services\\axios-service.js",[],"D:\\ReactJS\\demoReact\\EmployeePayrollApp\\employeepayrollapp\\employeepayrollapp\\src\\config\\config.js",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":9,"column":39,"nodeType":"50","messageId":"51","endLine":9,"endColumn":47},{"ruleId":"52","severity":1,"message":"53","line":52,"column":10,"nodeType":"54","endLine":52,"endColumn":12,"suggestions":"55"},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getDataById' and 'params.id'. Either include them or remove the dependency array.","ArrayExpression",["58"],"no-global-assign","no-unsafe-negation",{"desc":"59","fix":"60"},"Update the dependencies array to be: [getDataById, params.id]",{"range":"61","text":"62"},[1808,1810],"[getDataById, params.id]"]